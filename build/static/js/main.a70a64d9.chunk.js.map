{"version":3,"sources":["assets/logo.svg","assets/github-background.svg","styles/global.ts","services/api.ts","pages/Dashboard/styles.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["module","exports","createGlobalStyle","githubBackground","api","axios","create","baseURL","Title","styled","h1","Form","form","props","hasError","css","shade","Error","span","Repositories","div","Dashboard","useState","newRepo","setNewRepo","inputError","setInputError","storagedRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","to","src","logoImg","alt","onSubmit","value","onChange","e","target","placeholder","type","map","full_name","key","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","setRepository","issues","setIssues","params","useRouteMatch","then","stargazers_count","forks_count","open_issues_count","issue","id","href","html_url","title","user","Routes","path","exact","component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a70a64d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.04f6798f.svg\";","module.exports = __webpack_public_path__ + \"static/media/github-background.fe82ec00.svg\";","import { createGlobalStyle } from 'styled-components';\r\n\r\nimport githubBackground from '../assets/github-background.svg';\r\n\r\nexport default createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    outline: 0;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  body {\r\n    background: #F0F0F5 url(${githubBackground}) no-repeat 70% top;\r\n    -webkit-font-smoothing: antialiased;\r\n  }\r\n\r\n  body, input, button {\r\n    font: 16px Roboto, sans-serif;\r\n  }\r\n\r\n  #root {\r\n    max-width: 960px;\r\n    margin: 0 auto;\r\n    padding: 40px 20px;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n  }\r\n`;","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'https://api.github.com',\r\n});\r\n\r\nexport default api;","import styled, { css } from 'styled-components';\r\n\r\nimport { shade } from 'polished';\r\n\r\ninterface FormProps {\r\n  hasError: boolean;\r\n}\r\n\r\nexport const Title = styled.h1`\r\n  font-size: 48px;\r\n  color: #3A3A3A;\r\n  max-width: 450px;\r\n  line-height: 56px;\r\n\r\n  margin-top: 80px;\r\n`;\r\n\r\nexport const Form = styled.form<FormProps>`\r\n  margin-top: 40px;\r\n  max-width: 700px;\r\n\r\n  display: flex;\r\n\r\n  input {\r\n    flex: 1;\r\n    height: 70px;\r\n    padding: 0 24px;\r\n    border: 0;\r\n    border-radius: 5px 0 0 5px;\r\n    color: #3a3a3a;\r\n    border: 2px solid #fff;\r\n    border-right: 0;\r\n\r\n    ${(props) => \r\n      props.hasError &&\r\n      css`\r\n          border-color: #c53030;\r\n      `}\r\n\r\n    &::placeholder {\r\n      color: '#a8a8b3';\r\n    }\r\n  }\r\n\r\n  button {\r\n    width: 210px;\r\n    height: 70px;\r\n    background: #04d361;\r\n    border-radius: 0px 5px 5px 0px;\r\n    border: 0;\r\n    color: #fff;\r\n    font-weight: bold;\r\n    transition: background-color 0.2s;\r\n\r\n    &:hover {\r\n      background: ${shade(0.2, '#04d361')};\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Error = styled.span`\r\n  display: block;\r\n  color: #c53030;\r\n  margin-top: 8px;\r\n`;\r\n\r\nexport const Repositories = styled.div`\r\n  margin-top: 80px;\r\n  max-width: 700px;\r\n\r\n  a {\r\n    background: #fff;\r\n    border-radius: 5px;\r\n    width: 100%;\r\n    padding: 24px;\r\n    display: block;\r\n    text-decoration: none;\r\n    display: flex;\r\n    align-items: center;\r\n    transition: transform 0.2s;;\r\n\r\n    &:hover {\r\n      transform: translateX(10px);\r\n    }\r\n\r\n    & + a {\r\n      margin-top: 16px;\r\n    }\r\n\r\n    img {\r\n      width: 64px;\r\n      height: 64px;\r\n      border-radius: 50%;\r\n    }\r\n\r\n    div {\r\n      margin: 0 16px;\r\n      flex: 1;\r\n\r\n      strong {\r\n        font-size: 20px;\r\n        color: #3D3D4D;\r\n      }\r\n\r\n      p {\r\n        font-size: 18px;\r\n        color: #A8A8B3;\r\n        margin-top: 4px;\r\n      }\r\n    }\r\n\r\n    svg {\r\n      margin-left: auto;\r\n      color: #cbcbd6;\r\n    }\r\n  }\r\n`;\r\n","import React, { useState, useEffect, FormEvent } from \"react\";\r\nimport { FiChevronRight } from \"react-icons/fi\";\r\nimport { Link } from 'react-router-dom';\r\nimport api from \"../../services/api\";\r\n\r\nimport logoImg from \"../../assets/logo.svg\";\r\n\r\nimport { Title, Form, Repositories, Error } from \"./styles\";\r\n\r\ninterface Repository {\r\n  full_name: string;\r\n  description: string;\r\n  owner: {\r\n    login: string;\r\n    avatar_url: string;\r\n  };\r\n}\r\n\r\nconst Dashboard: React.FC = () => {\r\n  const [newRepo, setNewRepo] = useState(\"\");\r\n  const [inputError, setInputError] = useState('');\r\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\r\n    const storagedRepositories = localStorage.getItem('@GithubExplorer:repositories');\r\n\r\n    if (storagedRepositories) {\r\n      return JSON.parse(storagedRepositories);\r\n    } else {\r\n      return [];\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\r\n      '@GithubExplorer:repositories', \r\n      JSON.stringify(repositories),\r\n    );\r\n  }, [repositories]); \r\n\r\n  async function handleAddRepository(\r\n    event: FormEvent<HTMLFormElement>\r\n  ): Promise<void> {\r\n    event.preventDefault();\r\n\r\n    if(!newRepo) {\r\n      setInputError('Digite o autor/nome do reposit贸rio!');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await api.get<Repository>(`repos/${newRepo}`);\r\n\r\n      const repository = response.data;\r\n  \r\n      setRepositories([...repositories, repository]);\r\n  \r\n      setNewRepo('');\r\n\r\n      setInputError('');\r\n    } catch (err) {\r\n      setInputError('Erro na busca por esse reposit贸rio!');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/\">\r\n        <img src={logoImg} alt=\"Github Explorer\" />\r\n      </Link>\r\n      <Title>Explore reposit贸rios no Github</Title>\r\n\r\n      <Form hasError={!!inputError} onSubmit={handleAddRepository}>\r\n        <input\r\n          value={newRepo}\r\n          onChange={(e) => setNewRepo(e.target.value)}\r\n          placeholder=\"Digite o nome do reposit贸rio\"\r\n        />\r\n        <button type=\"submit\">Pesquisar</button>\r\n      </Form>\r\n      { inputError && <Error>{inputError}</Error>  }\r\n      <Repositories>\r\n        {repositories.map((repository) => (\r\n          <Link to={`/repositories/${repository.full_name}`} key={repository.full_name}>\r\n            <img\r\n              src={repository.owner.avatar_url}\r\n              alt={repository.owner.login}\r\n            />\r\n            <div>\r\n              <strong>{repository.full_name}</strong>\r\n              <p>{repository.description}</p>\r\n            </div>\r\n\r\n            <FiChevronRight size={20} />\r\n          </Link>\r\n        ))}\r\n      </Repositories>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import styled from 'styled-components';\r\n\r\nexport const Header = styled.header`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  a {\r\n    display: flex;\r\n    align-items: center;\r\n    text-decoration: none;\r\n    color: #a8a8b3;\r\n    transition: color 0.2s;\r\n\r\n    &:hover {\r\n      color: #666;\r\n    }\r\n\r\n    svg {\r\n      margin-right: 4px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const RepositoryInfo = styled.section`\r\n  margin-top: 80px;\r\n\r\n  header {\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    img {\r\n      width: 120px;\r\n      height: 120px;\r\n      border-radius: 50%;\r\n    }\r\n\r\n    div {\r\n      margin-left: 24px;\r\n\r\n      strong {\r\n        font-size: 36px;\r\n        color: #3d3d4d;\r\n      }\r\n\r\n      p {\r\n        font-size: 18px;\r\n        color: #737380;\r\n        margin-top: 4px;\r\n      }\r\n    }\r\n  }\r\n\r\n  ul {\r\n    display: flex;\r\n    list-style: none;\r\n    margin-top: 40px;\r\n\r\n    li {\r\n      & + li {\r\n        margin-left: 80px;\r\n      }\r\n\r\n      strong {\r\n        display: block;\r\n        font-size: 36px;\r\n        color: #3d3d4d;\r\n      }\r\n\r\n      span {\r\n        display: block;\r\n        margin-top: 4px;\r\n        color: #6c6c80;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Issues = styled.div`\r\n  margin-top: 80px;\r\n\r\n  a {\r\n    background: #fff;\r\n    border-radius: 5px;\r\n    width: 100%;\r\n    padding: 24px;\r\n    display: block;\r\n    text-decoration: none;\r\n    display: flex;\r\n    align-items: center;\r\n    transition: transform 0.2s;;\r\n\r\n    &:hover {\r\n      transform: translateX(10px);\r\n    }\r\n\r\n    & + a {\r\n      margin-top: 16px;\r\n    }\r\n\r\n    div {\r\n      margin: 0 16px;\r\n      flex: 1;\r\n\r\n      strong {\r\n        font-size: 20px;\r\n        color: #3D3D4D;\r\n      }\r\n\r\n      p {\r\n        font-size: 18px;\r\n        color: #A8A8B3;\r\n        margin-top: 4px;\r\n      }\r\n    }\r\n\r\n    svg {\r\n      margin-left: auto;\r\n      color: #cbcbd6;\r\n    }\r\n  }\r\n`;","import React, { useEffect, useState } from \"react\";\r\nimport { useRouteMatch, Link } from \"react-router-dom\";\r\nimport { FiChevronLeft, FiChevronRight } from \"react-icons/fi\";\r\nimport api from \"../../services/api\";\r\n\r\nimport logoImg from \"../../assets/logo.svg\";\r\n\r\nimport { Header, RepositoryInfo, Issues } from \"./styles\";\r\ninterface RepositoryParams {\r\n  repository: string;\r\n}\r\n\r\ninterface Repository {\r\n  full_name: string;\r\n  description: string;\r\n  stargazers_count: number;\r\n  forks_count: number;\r\n  open_issues_count: number;\r\n  owner: {\r\n    login: string;\r\n    avatar_url: string;\r\n  };\r\n}\r\n\r\ninterface Issue {\r\n  id: number;\r\n  title: string;\r\n  html_url: string;\r\n  user: {\r\n    login: string;\r\n  };\r\n}\r\n\r\nconst Repository: React.FC = () => {\r\n  const [repository, setRepository] = useState<Repository | null>(null);\r\n  const [issues, setIssues] = useState<Issue[]>([]);\r\n\r\n  const { params } = useRouteMatch<RepositoryParams>();\r\n\r\n  useEffect(() => {\r\n    api.get(`repos/${params.repository}`).then((response) => {\r\n      setRepository(response.data);\r\n    });\r\n\r\n    api.get(`repos/${params.repository}/issues`).then((response) => {\r\n      setIssues(response.data);\r\n    });\r\n  }, [params.repository]);\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <Link to=\"/\">\r\n          <img src={logoImg} alt=\"Github Explorer\" />\r\n        </Link>\r\n        <Link to=\"/\">\r\n          <FiChevronLeft size={16} />\r\n          Voltar\r\n        </Link>\r\n      </Header>\r\n\r\n      {repository && (\r\n        <RepositoryInfo>\r\n          <header>\r\n            <img\r\n              src={repository.owner.avatar_url}\r\n              alt={repository.owner.login}\r\n            />\r\n            <div>\r\n              <strong>{repository.full_name}</strong>\r\n              <p>{repository.description}</p>\r\n            </div>\r\n          </header>\r\n          <ul>\r\n            <li>\r\n              <strong>{repository.stargazers_count}</strong>\r\n              <span>Stars</span>\r\n            </li>\r\n            <li>\r\n              <strong>{repository.forks_count}</strong>\r\n              <span>Forks</span>\r\n            </li>\r\n            <li>\r\n              <strong>{repository.open_issues_count}</strong>\r\n              <span>Issues abertas</span>\r\n            </li>\r\n          </ul>\r\n        </RepositoryInfo>\r\n      )}\r\n\r\n      <Issues>\r\n        {issues.map((issue) => (\r\n          <a key={issue.id} target=\"_blank\" href={issue.html_url}>\r\n            <div>\r\n              <strong>{issue.title}</strong>\r\n              <p>{issue.user.login}</p>\r\n            </div>\r\n\r\n            <FiChevronRight size={20} />\r\n          </a>\r\n        ))}\r\n      </Issues>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Repository;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport Dashboard from '../pages/Dashboard';\r\nimport Repository from '../pages/Repository';\r\n\r\nconst Routes: React.FC = () => (\r\n  <Switch>\r\n    <Route path=\"/\" exact component={Dashboard}/>\r\n    <Route path=\"/repositories/:repository+\" component={Repository}/>\r\n  </Switch>\r\n);\r\n\r\nexport default Routes;","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nimport GlobalStyle from './styles/global';\nimport Routes from './routes';\n\nconst App: React.FC = () => (\n  <>\n    <BrowserRouter>\n      <Routes />\n    </BrowserRouter>\n    <GlobalStyle />\n  </>  \n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}